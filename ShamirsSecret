import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ShamirSecretSharing {

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            System.out.println("Enter the value of n (number of roots): ");
            int n = scanner.nextInt();
            System.out.println("Enter the value of k (minimum roots required): ");
            int k = scanner.nextInt();

            int m = k - 1;

            List<BigInteger[]> points = new ArrayList<>();
            System.out.println("Enter the roots in the format <x> <base> <value>: ");
            for (int i = 0; i < n; i++) {
                int x = scanner.nextInt();
                int base = scanner.nextInt();
                String value = scanner.next();

                BigInteger y = new BigInteger(value, base);
                points.add(new BigInteger[]{BigInteger.valueOf(x), y});
            }

            BigInteger secret = calculateConstantTerm(points, m);

            System.out.println("The secret (constant term c) is: " + secret);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static BigInteger calculateConstantTerm(List<BigInteger[]> points, int degree) {
        BigInteger constantTerm = BigInteger.ZERO;
        BigInteger p = new BigInteger("104729"); // A large prime modulus

        for (int i = 0; i <= degree; i++) {
            BigInteger xi = points.get(i)[0];
            BigInteger yi = points.get(i)[1];
            BigInteger li = BigInteger.ONE;

            for (int j = 0; j <= degree; j++) {
                if (i != j) {
                    BigInteger xj = points.get(j)[0];
                    BigInteger numerator = xj.negate().mod(p);
                    BigInteger denominator = xi.subtract(xj).mod(p).modInverse(p);
                    li = li.multiply(numerator).multiply(denominator).mod(p);
                }
            }

            constantTerm = constantTerm.add(yi.multiply(li)).mod(p);
        }

        return constantTerm;
    }
}
